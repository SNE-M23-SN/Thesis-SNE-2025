---
# SAST Role Tasks - Docker Engine with TLS Certificate Integration


# - name: Set a hostname for (WORKER)
#   ansible.builtin.hostname:
#     name: "{{ worker_hostname }}"


# # ===== System Preparation =====
# - name: Update apt cache
#   apt:
#     update_cache: yes
#     cache_valid_time: 3600
#   delegate_to: "{{ sast_target_node | default('worker') }}"

# - name: Install required system packages
#   apt:
#     name: "{{ docker_dependencies }}"
#     state: present
#   delegate_to: "{{ sast_target_node | default('worker') }}"

# # ===== Docker Repository Setup =====
# - name: Add Docker GPG key
#   apt_key:
#     url: "{{ docker_gpg_key_url }}"
#     id: "{{ docker_gpg_key_id }}"
#     state: present
#   delegate_to: "{{ sast_target_node | default('worker') }}"

# - name: Add Docker repository
#   apt_repository:
#     repo: "deb [arch=amd64] {{ docker_repo_url }} {{ ansible_distribution_release }} stable"
#     state: present
#     update_cache: yes
#   delegate_to: "{{ sast_target_node | default('worker') }}"

# # ===== Docker Installation =====
# - name: Install Docker packages
#   apt:
#     name: "{{ docker_packages }}"
#     state: present
#     update_cache: yes
#   delegate_to: "{{ sast_target_node | default('worker') }}"

# - name: Start and enable Docker service
#   systemd:
#     name: docker
#     state: started
#     enabled: yes
#     daemon_reload: yes
#   delegate_to: "{{ sast_target_node | default('worker') }}"

# # ===== User Configuration =====
# - name: Create docker group
#   group:
#     name: "{{ docker_group }}"
#     state: present
#   delegate_to: "{{ sast_target_node | default('worker') }}"

# - name: Add user to docker group
#   user:
#     name: "{{ docker_user }}"
#     groups: "{{ docker_group }}"
#     append: yes
#   delegate_to: "{{ sast_target_node | default('worker') }}"

# # ===== Certificate Directory Setup =====
# - name: Create Docker certificates directory
#   file:
#     path: "{{ docker_certs_dir }}"
#     state: directory
#     mode: '0755'
#     owner: root
#     group: root
#   delegate_to: "{{ sast_target_node | default('worker') }}"

# # ===== Certificate Transfer =====
# - name: Check if certificates exist on control node
#   stat:
#     path: "{{ local_certs_dir }}/{{ item.value }}"
#   loop: "{{ cert_files | dict2items }}"
#   register: cert_files_check
#   delegate_to: localhost
#   run_once: true
#   become: false

# - name: Fail if certificates are missing
#   fail:
#     msg: "Certificate file {{ item.item.value }} not found in {{ local_certs_dir }}. Please run FirstStage role first to generate certificates."
#   when: not item.stat.exists
#   loop: "{{ cert_files_check.results }}"
#   delegate_to: localhost
#   run_once: true

# - name: Copy CA certificate to target node
#   copy:
#     src: "{{ local_certs_dir }}/{{ cert_files.ca_cert }}"
#     dest: "{{ docker_certs_dir }}/{{ cert_files.ca_cert }}"
#     mode: "{{ cert_file_permissions.ca_cert }}"
#     owner: root
#     group: root
#   delegate_to: "{{ sast_target_node | default('worker') }}"

# - name: Copy server certificate to target node
#   copy:
#     src: "{{ local_certs_dir }}/{{ cert_files.server_cert }}"
#     dest: "{{ docker_certs_dir }}/{{ cert_files.server_cert }}"
#     mode: "{{ cert_file_permissions.server_cert }}"
#     owner: root
#     group: root
#   delegate_to: "{{ sast_target_node | default('worker') }}"

# - name: Copy server key to target node
#   copy:
#     src: "{{ local_certs_dir }}/{{ cert_files.server_key }}"
#     dest: "{{ docker_certs_dir }}/{{ cert_files.server_key }}"
#     mode: "{{ cert_file_permissions.server_key }}"
#     owner: root
#     group: root
#   delegate_to: "{{ sast_target_node | default('worker') }}"



# # ===== Docker Service Configuration =====
# - name: Backup original Docker service file
#   copy:
#     src: "{{ docker_service_file }}"
#     dest: "{{ docker_service_file }}.backup"
#     remote_src: yes
#     mode: '0644'
#     owner: root
#     group: root
#   delegate_to: "{{ sast_target_node | default('worker') }}"

# - name: Read current Docker service file
#   slurp:
#     src: "{{ docker_service_file }}"
#   register: docker_service_content
#   delegate_to: "{{ sast_target_node | default('worker') }}"

# - name: Get current ExecStart line
#   shell: grep '^ExecStart=' "{{ docker_service_file }}" | head -1
#   register: current_execstart
#   delegate_to: "{{ sast_target_node | default('worker') }}"

# - name: Update Docker service ExecStart with TLS flags (preserving existing flags)
#   lineinfile:
#     path: "{{ docker_service_file }}"
#     regexp: '^ExecStart=/usr/bin/dockerd'
#     line: "{{ current_execstart.stdout }} {{ docker_tls_flags }}"
#     backup: yes
#   delegate_to: "{{ sast_target_node | default('worker') }}"
#   notify: restart docker

# # ===== Service Management =====
# - name: Reload systemd daemon
#   systemd:
#     daemon_reload: yes
#   delegate_to: "{{ sast_target_node | default('worker') }}"

# - name: Restart Docker service to apply TLS configuration
#   systemd:
#     name: docker
#     state: restarted
#   delegate_to: "{{ sast_target_node | default('worker') }}"

# # ===== Verification =====
# - name: Wait for Docker daemon to be ready
#   wait_for:
#     port: "{{ docker_daemon_port }}"
#     host: "{{ hostvars[sast_target_node | default('worker')].ansible_host }}"
#     timeout: 60
#   delegate_to: localhost
#   become: false


# # ===== SAST Tools Image Preparation =====
# - name: Pull SAST tool images
#   community.docker.docker_image:
#     name: "{{ item }}"
#     source: pull
#     state: present
#   loop: "{{ sast_images }}"
#   delegate_to: "{{ sast_target_node | default('worker') }}"
#   ignore_errors: yes
#   register: image_pull_results




# ===== SAST Tools Image Loading =====
- name: Load SAST tool images from tar files
  community.docker.docker_image:
    name: "{{ item.image_name }}"
    load_path: "./Docker-images/{{ item.tar_file }}"
    source: load
    state: present
  loop: "{{ sast_image_mapping }}"
  delegate_to: "{{ sast_target_node | default('worker') }}"
  ignore_errors: yes
  register: image_load_results


- name: Display image load results
  debug:
    msg: |
      üì¶ SAST Image Load Results:
      {% for result in image_load_results.results %}
      - {{ result.item.tar_file }} ({{ result.item.image_name }}): {{ result.failed | default(false) | ternary('‚ùå Failed', '‚úÖ Success') }}
      {% endfor %}
  when: image_load_results is defined


- name: Verify loaded images
  community.docker.docker_image_info:
    name: "{{ item.image_name }}"
  loop: "{{ sast_image_mapping }}"
  delegate_to: "{{ sast_target_node | default('worker') }}"
  register: image_verification
  ignore_errors: yes

# ===== Deployment Summary =====
- name: Display SAST deployment summary
  debug:
    msg: |

      üîí SAST Platform Deployment Summary
      ===================================

      üê≥ Docker Engine:
         - TLS Enabled: {{ docker_tls_enabled }}
         - Daemon Port: {{ docker_daemon_port }}
         - Socket: /var/run/docker.sock

      üîê TLS Configuration:
         - Certificates Directory: {{ docker_certs_dir }}
         - CA Certificate: {{ docker_certs_dir }}/{{ cert_files.ca_cert }}
         - Server Certificate: {{ docker_certs_dir }}/{{ cert_files.server_cert }}
         - Server Key: {{ docker_certs_dir }}/{{ cert_files.server_key }}
         - TLS Verification: Enabled (server-side only)

      üåê External Access:
         - Docker API: https://{{ hostvars[sast_target_node | default('worker')].ansible_host }}:{{ docker_daemon_port }}
         - TLS Verification: {{ docker_version_check.status | default('Failed') == 200 | ternary('‚úÖ Success', '‚ùå Failed') }}

      üõ†Ô∏è SAST Tools Ready:
         {% for tool in sast_tools %}
         - {{ tool.name | title }}: {{ tool.enabled | ternary('‚úÖ Enabled', '‚ùå Disabled') }}
         {% endfor %}

      ÔøΩ SAST Images Pulled:
         - Alpine Git: alpine/git:v2.47.2
         - Semgrep Pro: semgrep/semgrep:pro-sha-2e03a2a6e75d2cb4bdf5275148b9397e3c79796a
         - Horusec CLI: horuszup/horusec-cli:v2.9.0-beta.3
         - Bearer: bearer/bearer:1.49.0
         - Horusec Generic: horuszup/horusec-generic:v1.2.0
         - Horusec Shell: horuszup/horusec-shell:v1.0.1
         - Horusec JS: horuszup/horusec-js:v1.2.0
         - Trivy: aquasec/trivy:0.61.0

      ÔøΩüìã Next Steps:
         - Deploy SAST analysis containers
         - Configure SAST tool integrations
         - Set up CI/CD pipeline connections

      üîó Connection Example:
         docker --tls --tlscacert={{ local_certs_dir }}/{{ cert_files.ca_cert }} \
                -H={{ hostvars[sast_target_node | default('worker')].ansible_host }}:{{ docker_daemon_port }} version

      üìù Note: Server-side TLS only - no client certificates required
