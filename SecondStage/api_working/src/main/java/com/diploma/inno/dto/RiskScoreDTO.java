package com.diploma.inno.dto;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Data Transfer Object for AI-calculated risk score information from the CI Anomaly Detector system.
 *
 * <p>This DTO encapsulates comprehensive risk assessment data generated by AI analysis of Jenkins
 * build logs and artifacts. It provides quantitative risk scoring, trend analysis, and categorical
 * risk classification to enable automated build quality gating and deployment decision-making.</p>
 *
 * <p><strong>Data Source &amp; Processing Pipeline:</strong></p>
 * <ol>
 *   <li><strong>Build Log Analysis:</strong> AI analyzes Jenkins build logs for anomalies and patterns</li>
 *   <li><strong>Risk Calculation:</strong> AI algorithms calculate numerical risk scores (0-100)</li>
 *   <li><strong>Trend Analysis:</strong> Comparison with previous builds to determine risk changes</li>
 *   <li><strong>Level Classification:</strong> Risk scores categorized into LOW, MEDIUM, HIGH, CRITICAL</li>
 *   <li><strong>JSONB Storage:</strong> Results stored in chat_messages.content->'riskScore' object</li>
 *   <li><strong>DTO Mapping:</strong> Jackson ObjectMapper deserializes JSONB to RiskScoreDTO</li>
 * </ol>
 *
 * <p><strong>Database Query Structure:</strong></p>
 * <p>Risk score data is extracted using JSONB operations:</p>
 * {@snippet lang=SQL :
 * SELECT jsonb_build_object(
 *   'score', (content->'riskScore'->>'score')::integer,
 *   'change', (content->'riskScore'->>'change')::integer,
 *   'riskLevel', content->'riskScore'->>'riskLevel',
 *   'previousScore', (content->'riskScore'->>'previousScore')::integer
 * ) AS risk_score
 * FROM chat_messages
 * WHERE message_type = 'ASSISTANT'
 *   AND conversation_id = :conversationId
 *   AND build_number = :buildNumber
 * }
 *
 * <p><strong>JSONB Content Structure:</strong></p>
 * <p>Risk score data is stored within the AI analysis results:</p>
 * {@snippet lang=JSON :
 * {
 *   "anomalies": ["..."],
 *   "buildMetadata": "{...}",
 *   "riskScore": {
 *     "score": 75,
 *     "change": 15,
 *     "riskLevel": "HIGH",
 *     "previousScore": 60
 *   },
 *   "insights": "{...}"
 * }
 * }
 *
 * <p><strong>Risk Score Calculation:</strong></p>
 * <p>AI algorithms analyze multiple factors to calculate risk scores:</p>
 * <ul>
 *   <li><strong>Anomaly Severity:</strong> CRITICAL and HIGH anomalies heavily weighted</li>
 *   <li><strong>Anomaly Count:</strong> Multiple anomalies increase overall risk</li>
 *   <li><strong>Security Issues:</strong> Security vulnerabilities and exposures</li>
 *   <li><strong>Performance Regressions:</strong> Build time and performance degradation</li>
 *   <li><strong>Test Failures:</strong> Failed tests and quality gate violations</li>
 *   <li><strong>Dependency Issues:</strong> Vulnerable or outdated dependencies</li>
 *   <li><strong>Configuration Problems:</strong> Misconfigurations and setup issues</li>
 * </ul>
 *
 * <p><strong>Risk Level Classification:</strong></p>
 * <ul>
 *   <li><strong>LOW (0-25):</strong> Minimal risk, good build health, safe for deployment</li>
 *   <li><strong>MEDIUM (26-50):</strong> Moderate risk, some issues to address, review recommended</li>
 *   <li><strong>HIGH (51-75):</strong> Significant risk, requires attention, deployment caution</li>
 *   <li><strong>CRITICAL (76-100):</strong> Severe risk, immediate action needed, block deployment</li>
 * </ul>
 *
 * <p><strong>Change Calculation:</strong></p>
 * <p>Risk change represents the difference from the previous build:</p>
 * <ul>
 *   <li><strong>Positive Change:</strong> Risk increased compared to previous build</li>
 *   <li><strong>Negative Change:</strong> Risk decreased compared to previous build</li>
 *   <li><strong>Zero Change:</strong> Risk remained the same as previous build</li>
 *   <li><strong>Null Previous:</strong> No previous build data available for comparison</li>
 * </ul>
 *
 * <p><strong>AI Analysis Integration:</strong></p>
 * <ul>
 *   <li><strong>Log Processing:</strong> AI analyzes build logs for patterns and anomalies</li>
 *   <li><strong>Pattern Recognition:</strong> Machine learning identifies known issue patterns</li>
 *   <li><strong>Contextual Analysis:</strong> AI considers build context and historical data</li>
 *   <li><strong>Continuous Learning:</strong> AI models improve with more build data</li>
 * </ul>
 *
 * <p><strong>REST API Integration:</strong></p>
 * <ul>
 *   <li><strong>Endpoint:</strong> GET /api/dashboard/builds/{conversationId}/{buildNumber}/risk-score</li>
 *   <li><strong>Response Format:</strong> Map with "hasData" flag and "data" containing RiskScoreDTO</li>
 *   <li><strong>Error Handling:</strong> Graceful handling of missing or invalid risk data</li>
 *   <li><strong>Validation:</strong> Ensures score and riskLevel are present before returning</li>
 * </ul>
 *
 * <p><strong>Dashboard Integration:</strong></p>
 * <ul>
 *   <li><strong>Risk Indicators:</strong> Color-coded risk level visualization</li>
 *   <li><strong>Trend Charts:</strong> Risk score trends over time</li>
 *   <li><strong>Change Alerts:</strong> Notifications for significant risk changes</li>
 *   <li><strong>Deployment Gates:</strong> Automated deployment blocking for high-risk builds</li>
 * </ul>
 *
 * <p><strong>Use Cases:</strong></p>
 * <ul>
 *   <li><strong>Build Quality Assessment:</strong> Quantitative build health evaluation</li>
 *   <li><strong>Security Risk Monitoring:</strong> Early detection of security vulnerabilities</li>
 *   <li><strong>Trend Analysis:</strong> Long-term build health trend identification</li>
 *   <li><strong>Automated Decision Making:</strong> Risk-based deployment automation</li>
 *   <li><strong>Quality Gating:</strong> Prevent deployment of high-risk builds</li>
 * </ul>
 *
 * <p><strong>JSON Serialization Example:</strong></p>
 * {@snippet lang=json :
 * {
 *   "score": 75,
 *   "change": 15,
 *   "riskLevel": "HIGH",
 *   "previousScore": 60
 * }
 * }
 *
 * <p><strong>Error Handling:</strong></p>
 * <ul>
 *   <li><strong>JsonProcessingException:</strong> Malformed JSONB content structure</li>
 *   <li><strong>Missing Data:</strong> No AI analysis available for the specified build</li>
 *   <li><strong>Invalid Format:</strong> Risk score or level fields are null or invalid</li>
 *   <li><strong>Service Errors:</strong> Graceful degradation when AI analysis fails</li>
 * </ul>
 *
 * <p><strong>Thread Safety:</strong></p>
 * <p>This DTO is immutable after construction and thread-safe for concurrent access.
 * All fields are set via constructor and accessed through getter methods.</p>
 *
 * @author Khasan Abdurakhmanov
 * @version 1.0
 * @since 1.0
 * @see com.diploma.inno.service.DashboardService#getRiskScore(String, Integer)
 * @see com.diploma.inno.repository.ChatMessageRepository#findRiskScore(String, Integer)
 * @see com.diploma.inno.entity.ChatMessageEntity
 */
public class RiskScoreDTO {

    /**
     * The current risk score for the build (0-100 scale).
     *
     * <p>This field represents the AI-calculated numerical risk assessment for the current
     * build, providing a quantitative measure of build quality and potential issues.
     * The score is calculated by analyzing multiple factors including anomalies, security
     * issues, performance regressions, and other build quality indicators.</p>
     *
     * <p><strong>JSONB Mapping:</strong></p>
     * <p>Maps to {@code content->'riskScore'->>'score'} in chat_messages table</p>
     *
     * <p><strong>Score Range &amp; Interpretation:</strong></p>
     * <ul>
     *   <li><strong>0-25:</strong> LOW risk - Minimal issues, good build health</li>
     *   <li><strong>26-50:</strong> MEDIUM risk - Moderate issues, some attention needed</li>
     *   <li><strong>51-75:</strong> HIGH risk - Significant issues, requires attention</li>
     *   <li><strong>76-100:</strong> CRITICAL risk - Severe issues, immediate action needed</li>
     * </ul>
     *
     * <p><strong>Calculation Factors:</strong></p>
     * <ul>
     *   <li><strong>Anomaly Severity:</strong> CRITICAL and HIGH anomalies heavily weighted</li>
     *   <li><strong>Anomaly Count:</strong> Multiple anomalies compound the risk score</li>
     *   <li><strong>Security Vulnerabilities:</strong> Security issues increase risk significantly</li>
     *   <li><strong>Performance Regressions:</strong> Build time and performance degradation</li>
     *   <li><strong>Test Failures:</strong> Failed tests and quality gate violations</li>
     *   <li><strong>Dependency Issues:</strong> Vulnerable or outdated dependencies</li>
     * </ul>
     *
     * <p><strong>AI Analysis Process:</strong></p>
     * <ul>
     *   <li><strong>Log Analysis:</strong> AI parses build logs for patterns and anomalies</li>
     *   <li><strong>Pattern Recognition:</strong> Machine learning identifies known issue patterns</li>
     *   <li><strong>Weighted Scoring:</strong> Different issue types have different risk weights</li>
     *   <li><strong>Contextual Assessment:</strong> Historical data and build context considered</li>
     * </ul>
     *
     * <p><strong>Usage in Decision Making:</strong></p>
     * <ul>
     *   <li><strong>Deployment Gating:</strong> High scores can block automated deployments</li>
     *   <li><strong>Quality Metrics:</strong> Track build quality trends over time</li>
     *   <li><strong>Alert Thresholds:</strong> Trigger notifications for score increases</li>
     *   <li><strong>Risk Assessment:</strong> Quantify build risk for stakeholders</li>
     * </ul>
     */
    private Integer score;

    /**
     * The change in risk score compared to the previous build.
     *
     * <p>This field represents the difference between the current build's risk score
     * and the previous build's risk score, enabling trend analysis and identification
     * of improving or deteriorating build quality.</p>
     *
     * <p><strong>JSONB Mapping:</strong></p>
     * <p>Maps to {@code content->'riskScore'->>'change'} in chat_messages table</p>
     *
     * <p><strong>Change Interpretation:</strong></p>
     * <ul>
     *   <li><strong>Positive Values:</strong> Risk increased compared to previous build</li>
     *   <li><strong>Negative Values:</strong> Risk decreased compared to previous build</li>
     *   <li><strong>Zero:</strong> Risk remained the same as previous build</li>
     *   <li><strong>Null:</strong> No previous build data available for comparison</li>
     * </ul>
     *
     * <p><strong>Calculation Formula:</strong></p>
     * <p>{@code change = currentScore - previousScore}</p>
     *
     * <p><strong>Change Significance:</strong></p>
     * <ul>
     *   <li><strong>±1-5:</strong> Minor change, normal variation</li>
     *   <li><strong>±6-15:</strong> Moderate change, worth monitoring</li>
     *   <li><strong>±16-30:</strong> Significant change, requires attention</li>
     *   <li><strong>±31+:</strong> Major change, immediate investigation needed</li>
     * </ul>
     *
     * <p><strong>Trend Analysis:</strong></p>
     * <ul>
     *   <li><strong>Improving Trend:</strong> Consistent negative changes indicate quality improvement</li>
     *   <li><strong>Deteriorating Trend:</strong> Consistent positive changes indicate quality decline</li>
     *   <li><strong>Volatile Pattern:</strong> Large swings may indicate unstable build process</li>
     *   <li><strong>Stable Pattern:</strong> Small changes indicate consistent build quality</li>
     * </ul>
     *
     * <p><strong>Dashboard Integration:</strong></p>
     * <ul>
     *   <li><strong>Change Indicators:</strong> Visual arrows showing increase/decrease</li>
     *   <li><strong>Color Coding:</strong> Green for improvement, red for deterioration</li>
     *   <li><strong>Trend Charts:</strong> Historical change patterns over time</li>
     *   <li><strong>Alert Triggers:</strong> Notifications for significant changes</li>
     * </ul>
     */
    private Integer change;

    /**
     * The categorical risk level classification for the build.
     *
     * <p>This field provides a human-readable categorical classification of the build's
     * risk level, derived from the numerical risk score. It enables quick assessment
     * and decision-making without requiring detailed score analysis.</p>
     *
     * <p><strong>JSONB Mapping:</strong></p>
     * <p>Maps to {@code content->'riskScore'->>'riskLevel'} in chat_messages table</p>
     *
     * <p><strong>Risk Level Categories:</strong></p>
     * <ul>
     *   <li><strong>LOW:</strong> Score 0-25, minimal risk, safe for deployment</li>
     *   <li><strong>MEDIUM:</strong> Score 26-50, moderate risk, review recommended</li>
     *   <li><strong>HIGH:</strong> Score 51-75, significant risk, deployment caution</li>
     *   <li><strong>CRITICAL:</strong> Score 76-100, severe risk, block deployment</li>
     * </ul>
     *
     * <p><strong>Classification Logic:</strong></p>
     * <p>Risk levels are determined by AI analysis considering:</p>
     * <ul>
     *   <li><strong>Anomaly Severity Distribution:</strong> Presence of CRITICAL/HIGH anomalies</li>
     *   <li><strong>Security Impact:</strong> Security vulnerabilities and exposures</li>
     *   <li><strong>Business Impact:</strong> Potential impact on production systems</li>
     *   <li><strong>Historical Context:</strong> Comparison with previous builds and patterns</li>
     * </ul>
     *
     * <p><strong>Decision Making Guidelines:</strong></p>
     * <ul>
     *   <li><strong>LOW:</strong> Proceed with deployment, minimal oversight needed</li>
     *   <li><strong>MEDIUM:</strong> Review issues before deployment, moderate oversight</li>
     *   <li><strong>HIGH:</strong> Thorough review required, consider delaying deployment</li>
     *   <li><strong>CRITICAL:</strong> Block deployment, immediate remediation required</li>
     * </ul>
     *
     * <p><strong>Dashboard Integration:</strong></p>
     * <ul>
     *   <li><strong>Color Coding:</strong> Green (LOW), Yellow (MEDIUM), Orange (HIGH), Red (CRITICAL)</li>
     *   <li><strong>Status Badges:</strong> Visual indicators for quick risk assessment</li>
     *   <li><strong>Filtering:</strong> Enable filtering builds by risk level</li>
     *   <li><strong>Alerting:</strong> Trigger notifications for HIGH and CRITICAL levels</li>
     * </ul>
     *
     * <p><strong>Automation Integration:</strong></p>
     * <ul>
     *   <li><strong>Deployment Gates:</strong> Automated blocking for HIGH/CRITICAL levels</li>
     *   <li><strong>Approval Workflows:</strong> Require manual approval for elevated risk</li>
     *   <li><strong>Notification Rules:</strong> Different notification channels by risk level</li>
     *   <li><strong>Quality Gates:</strong> Integration with CI/CD pipeline quality gates</li>
     * </ul>
     */
    private String riskLevel;

    /**
     * The risk score from the previous build for comparison.
     *
     * <p>This field contains the risk score from the immediately preceding build,
     * enabling calculation of risk score changes and trend analysis. It provides
     * context for understanding whether build quality is improving or deteriorating.</p>
     *
     * <p><strong>JSONB Mapping:</strong></p>
     * <p>Maps to {@code content->'riskScore'->>'previousScore'} in chat_messages table</p>
     *
     * <p><strong>Value Characteristics:</strong></p>
     * <ul>
     *   <li><strong>Range:</strong> 0-100, same scale as current score</li>
     *   <li><strong>Null Handling:</strong> May be null for first build or missing data</li>
     *   <li><strong>Historical Context:</strong> Represents the most recent previous build</li>
     *   <li><strong>Comparison Base:</strong> Used to calculate the change field</li>
     * </ul>
     *
     * <p><strong>Trend Analysis Usage:</strong></p>
     * <ul>
     *   <li><strong>Change Calculation:</strong> {@code change = score - previousScore}</li>
     *   <li><strong>Trend Identification:</strong> Multiple builds show quality direction</li>
     *   <li><strong>Regression Detection:</strong> Significant increases indicate problems</li>
     *   <li><strong>Improvement Tracking:</strong> Decreases show quality improvements</li>
     * </ul>
     *
     * <p><strong>Data Availability:</strong></p>
     * <ul>
     *   <li><strong>First Build:</strong> Null for the first build of a job</li>
     *   <li><strong>Missing Analysis:</strong> Null if previous build lacks AI analysis</li>
     *   <li><strong>Data Gaps:</strong> Null if previous build data is unavailable</li>
     *   <li><strong>Historical Builds:</strong> Always refers to immediate predecessor</li>
     * </ul>
     *
     * <p><strong>Dashboard Visualization:</strong></p>
     * <ul>
     *   <li><strong>Comparison Charts:</strong> Side-by-side current vs previous scores</li>
     *   <li><strong>Trend Lines:</strong> Historical progression of risk scores</li>
     *   <li><strong>Change Indicators:</strong> Visual representation of score changes</li>
     *   <li><strong>Context Information:</strong> Provides baseline for change assessment</li>
     * </ul>
     */
    private Integer previousScore;

    /**
     * Constructs a new RiskScoreDTO with the specified risk assessment parameters.
     *
     * <p>This constructor creates a complete risk score information object ready for
     * JSON serialization and API response. It uses Jackson annotations to ensure
     * proper deserialization from JSONB content stored in the database.</p>
     *
     * <p><strong>Parameter Validation:</strong></p>
     * <ul>
     *   <li><strong>score:</strong> Should be 0-100 representing risk level</li>
     *   <li><strong>change:</strong> Can be positive, negative, or null for comparison</li>
     *   <li><strong>riskLevel:</strong> Should be LOW, MEDIUM, HIGH, or CRITICAL</li>
     *   <li><strong>previousScore:</strong> Should be 0-100 or null if unavailable</li>
     * </ul>
     *
     * <p><strong>Usage Context:</strong></p>
     * <ul>
     *   <li><strong>Service Layer:</strong> Called by DashboardService.getRiskScore()</li>
     *   <li><strong>JSON Deserialization:</strong> Jackson ObjectMapper creates instances from JSONB</li>
     *   <li><strong>Database Mapping:</strong> Parameters extracted from chat_messages.content</li>
     *   <li><strong>Response Assembly:</strong> Part of REST API response construction</li>
     * </ul>
     *
     * <p><strong>Data Consistency:</strong></p>
     * <ul>
     *   <li><strong>Score-Level Alignment:</strong> score should match riskLevel category</li>
     *   <li><strong>Change Calculation:</strong> change should equal score - previousScore</li>
     *   <li><strong>Null Handling:</strong> previousScore and change may be null for first builds</li>
     *   <li><strong>Range Validation:</strong> scores should be within 0-100 range</li>
     * </ul>
     *
     * <p><strong>Construction Examples:</strong></p>
     * {@snippet lang=java :
     * // High risk build with increase from previous
     * new RiskScoreDTO(75, 15, "HIGH", 60);
     *
     * // Low risk build with improvement
     * new RiskScoreDTO(20, -10, "LOW", 30);
     *
     * // First build with no previous data
     * new RiskScoreDTO(45, null, "MEDIUM", null);
     * }
     *
     * @param score the current risk score (0-100)
     * @param change the change from previous build (can be null)
     * @param riskLevel the categorical risk level (LOW, MEDIUM, HIGH, CRITICAL)
     * @param previousScore the previous build's risk score (can be null)
     */
    public RiskScoreDTO(
            @JsonProperty("score") Integer score,
            @JsonProperty("change") Integer change,
            @JsonProperty("riskLevel") String riskLevel,
            @JsonProperty("previousScore") Integer previousScore) {
        this.score = score;
        this.change = change;
        this.riskLevel = riskLevel;
        this.previousScore = previousScore;
    }

    /**
     * Returns the current risk score for the build.
     *
     * @return the risk score (0-100), may be null if not calculated
     */
    public Integer getScore() {
        return score;
    }

    /**
     * Sets the current risk score for the build.
     *
     * <p><strong>Note:</strong> This setter is primarily provided for framework
     * compatibility. In normal application flow, the score is set via
     * constructor during JSON deserialization.</p>
     *
     * @param score the risk score to set (0-100)
     */
    public void setScore(Integer score) {
        this.score = score;
    }

    /**
     * Returns the change in risk score compared to the previous build.
     *
     * @return the risk score change, may be null if no previous build
     */
    public Integer getChange() {
        return change;
    }

    /**
     * Sets the change in risk score compared to the previous build.
     *
     * <p><strong>Note:</strong> This setter is primarily provided for framework
     * compatibility. In normal application flow, the change is set via
     * constructor during JSON deserialization.</p>
     *
     * @param change the risk score change to set
     */
    public void setChange(Integer change) {
        this.change = change;
    }

    /**
     * Returns the categorical risk level classification.
     *
     * @return the risk level (LOW, MEDIUM, HIGH, CRITICAL), may be null if not classified
     */
    public String getRiskLevel() {
        return riskLevel;
    }

    /**
     * Sets the categorical risk level classification.
     *
     * <p><strong>Note:</strong> This setter is primarily provided for framework
     * compatibility. In normal application flow, the risk level is set via
     * constructor during JSON deserialization.</p>
     *
     * @param riskLevel the risk level to set
     */
    public void setRiskLevel(String riskLevel) {
        this.riskLevel = riskLevel;
    }

    /**
     * Returns the risk score from the previous build.
     *
     * @return the previous build's risk score (0-100), may be null if unavailable
     */
    public Integer getPreviousScore() {
        return previousScore;
    }

    /**
     * Sets the risk score from the previous build.
     *
     * <p><strong>Note:</strong> This setter is primarily provided for framework
     * compatibility. In normal application flow, the previous score is set via
     * constructor during JSON deserialization.</p>
     *
     * @param previousScore the previous risk score to set
     */
    public void setPreviousScore(Integer previousScore) {
        this.previousScore = previousScore;
    }
}